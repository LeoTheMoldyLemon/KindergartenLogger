<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:KindergartenLogger.Views"
       Title="KindergartenLogger"
       x:Class="KindergartenLogger.AppShell">

    <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

    <Shell.Resources>
        <ResourceDictionary>
            <Style x:Key="BaseStyle" TargetType="Element">
                <Setter Property="Shell.BackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.ForegroundColor" Value="White" />
                <Setter Property="Shell.TitleColor" Value="White" />
                <Setter Property="Shell.DisabledColor" Value="#B4FFFFFF" />
                <Setter Property="Shell.UnselectedColor" Value="#95FFFFFF" />
                <Setter Property="Shell.TabBarBackgroundColor" Value="{StaticResource Primary}" />
                <Setter Property="Shell.TabBarForegroundColor" Value="White"/>
                <Setter Property="Shell.TabBarUnselectedColor" Value="#95FFFFFF"/>
                <Setter Property="Shell.TabBarTitleColor" Value="White"/>
            </Style>
            <Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
            <Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

            <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
            <Style Class="FlyoutItemLabelStyle" TargetType="Label">
                <Setter Property="TextColor" Value="White"></Setter>
            </Style>
            <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{x:OnPlatform UWP=Transparent, iOS=White}" />
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>

            <!--
            Custom Style you can apply to any Flyout Item
            -->
            <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
                <Setter Property="VisualStateManager.VisualStateGroups">
                    <VisualStateGroupList>
                        <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal">
                                <VisualState.Setters>
                                    <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor" Value="{StaticResource Primary}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateGroupList>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Shell.Resources>

    <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->



    <FlyoutItem FlyoutDisplayOptions="AsMultipleItems">
        <Tab Title="Prijava dolazaka">
            <ShellContent Route="ChildEntryList" ContentTemplate="{DataTemplate local:ChildEntryList}" />
        </Tab>
    </FlyoutItem>
    <FlyoutItem FlyoutDisplayOptions="AsMultipleItems">
        <Tab Title="Prijava odlazaka">
            <ShellContent Route="ChildExitList" ContentTemplate="{DataTemplate local:ChildExitList}" />
        </Tab>
    </FlyoutItem>
    <FlyoutItem FlyoutDisplayOptions="AsMultipleItems">
        <Tab Title="Mijenjanje opcija">
            <ShellContent Route="GuardianOptionsList" ContentTemplate="{DataTemplate local:GuardianOptionsList}" />
        </Tab>
    </FlyoutItem>




    <MenuItem Text="Promjena baze podataka djece" StyleClass="MenuItemLayoutStyle" Clicked="ChildEditListClicked">
    </MenuItem>
    <MenuItem Text="Promjena baze podataka skrbnika" StyleClass="MenuItemLayoutStyle" Clicked="GuardianEditListClicked">
    </MenuItem>
    <MenuItem Text="Promjena opcija" StyleClass="MenuItemLayoutStyle" Clicked="OptionsEditClicked">
    </MenuItem>




    <TabBar>
        <ShellContent Route="MainPasswordPage" ContentTemplate="{DataTemplate local:MainPasswordPage}" />
    </TabBar>
    
    <TabBar>
        <ShellContent Route="ChildAddPage" ContentTemplate="{DataTemplate local:ChildAddPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="ChildEditPage" ContentTemplate="{DataTemplate local:ChildEditPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="ChildEditList" ContentTemplate="{DataTemplate local:ChildEditList}" />
    </TabBar>
    
    <TabBar>
        <ShellContent Route="GuardianEditList" ContentTemplate="{DataTemplate local:GuardianEditList}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="GuardianEditPage" ContentTemplate="{DataTemplate local:GuardianEditPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="ConnectionAddPage" ContentTemplate="{DataTemplate local:ConnectionAddPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="GuardianAddPage" ContentTemplate="{DataTemplate local:GuardianAddPage}" />
    </TabBar>

    <TabBar>
        <ShellContent Route="GuardianOptionsPage" ContentTemplate="{DataTemplate local:GuardianOptionsPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="GuardianPasswordPage" ContentTemplate="{DataTemplate local:GuardianPasswordPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="ConnectionExitPage" ContentTemplate="{DataTemplate local:ConnectionExitPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="ChildSuccessPage" ContentTemplate="{DataTemplate local:ChildSuccessPage}" />
    </TabBar>
    <TabBar>
        <ShellContent Route="MainOptionsPage" ContentTemplate="{DataTemplate local:MainOptionsPage}" />
    </TabBar>



    <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->



    <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
